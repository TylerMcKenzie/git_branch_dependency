// Generated by Haxe 4.0.0+ef18b627e
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_app_App
#include <app/App.h>
#endif
#ifndef INCLUDED_app_model_DependencyModel
#include <app/model/DependencyModel.h>
#endif
#ifndef INCLUDED_app_util_Formatter
#include <app/util/Formatter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_36_new,"app.App","new",0x7811b126,"app.App.new","app/App.hx",36,0x9296abcb)
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_51_run,"app.App","run",0x7814c811,"app.App.run","app/App.hx",51,0x9296abcb)
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_127_addDependency,"app.App","addDependency",0xb0ef3492,"app.App.addDependency","app/App.hx",127,0x9296abcb)
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_136_removeDependency,"app.App","removeDependency",0x4196cfa9,"app.App.removeDependency","app/App.hx",136,0x9296abcb)
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_142_updateDependencyRemotes,"app.App","updateDependencyRemotes",0x1761f31f,"app.App.updateDependencyRemotes","app/App.hx",142,0x9296abcb)
static const ::String _hx_array_data_2514e634_11[] = {
	HX_("origin",e6,19,01,4b),
};
static const ::String _hx_array_data_2514e634_12[] = {
	HX_("pull",c5,0b,61,4a),
};
static const ::String _hx_array_data_2514e634_13[] = {
	HX_("--hard",4b,86,1f,2c),
};
static const ::String _hx_array_data_2514e634_14[] = {
	HX_("reset",cf,49,c8,e6),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_184_updateDependencyBranch,"app.App","updateDependencyBranch",0x16b46af0,"app.App.updateDependencyBranch","app/App.hx",184,0x9296abcb)
static const ::String _hx_array_data_2514e634_17[] = {
	HX_("pull",c5,0b,61,4a),
};
static const ::String _hx_array_data_2514e634_18[] = {
	HX_("--diff-filter=UU",fd,ec,ab,14),HX_("--name-only",8e,ea,71,0d),
};
static const ::String _hx_array_data_2514e634_19[] = {
	HX_("diff",05,5c,69,42),
};
static const ::String _hx_array_data_2514e634_20[] = {
	HX_("--global",c3,20,d6,04),HX_("core.editor",dc,d4,6d,6b),
};
static const ::String _hx_array_data_2514e634_21[] = {
	HX_("config",c2,56,d2,c7),
};
static const ::String _hx_array_data_2514e634_22[] = {
	HX_("-am",59,7a,22,00),HX_("'Updated merge conflicts'",5a,bc,2c,5b),
};
static const ::String _hx_array_data_2514e634_23[] = {
	HX_("commit",f7,6f,2e,c7),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_237_updateBranch,"app.App","updateBranch",0x1dfb7c05,"app.App.updateBranch","app/App.hx",237,0x9296abcb)
static const ::String _hx_array_data_2514e634_25[] = {
	HX_("fetch",3a,14,fa,fd),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_244_checkDependencyRemoteStatus,"app.App","checkDependencyRemoteStatus",0x9ece2b71,"app.App.checkDependencyRemoteStatus","app/App.hx",244,0x9296abcb)
static const ::String _hx_array_data_2514e634_28[] = {
	HX_("branch",a2,fe,18,13),HX_("ahead",01,6e,e9,1e),HX_("behind",ba,30,80,9b),HX_("status",32,e7,fb,05),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_260_getBranchRemoteStatus,"app.App","getBranchRemoteStatus",0x26326096,"app.App.getBranchRemoteStatus","app/App.hx",260,0x9296abcb)
static const ::String _hx_array_data_2514e634_30[] = {
	HX_("rev-list",c8,76,46,3f),
};
static const ::String _hx_array_data_2514e634_31[] = {
	HX_("rev-list",c8,76,46,3f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_285_getBranchMergeStatus,"app.App","getBranchMergeStatus",0xa8d1a78c,"app.App.getBranchMergeStatus","app/App.hx",285,0x9296abcb)
static const ::String _hx_array_data_2514e634_34[] = {
	HX_("--merged",0c,ae,2b,65),
};
static const ::String _hx_array_data_2514e634_35[] = {
	HX_("branch",a2,fe,18,13),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_303_loadCurrentBranch,"app.App","loadCurrentBranch",0x6913c4fb,"app.App.loadCurrentBranch","app/App.hx",303,0x9296abcb)
static const ::String _hx_array_data_2514e634_37[] = {
	HX_("--abbrev-ref",48,a7,a8,ad),HX_("HEAD",20,f1,cb,2f),
};
static const ::String _hx_array_data_2514e634_38[] = {
	HX_("rev-parse",89,52,b1,66),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_321_updateRemotes,"app.App","updateRemotes",0x6e49d46a,"app.App.updateRemotes","app/App.hx",321,0x9296abcb)
static const ::String _hx_array_data_2514e634_40[] = {
	HX_("update",09,86,05,87),
};
static const ::String _hx_array_data_2514e634_41[] = {
	HX_("remote",86,9a,88,04),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_328_pruneDependencies,"app.App","pruneDependencies",0xc3c81979,"app.App.pruneDependencies","app/App.hx",328,0x9296abcb)
static const ::String _hx_array_data_2514e634_45[] = {
	HX_("--merged",0c,ae,2b,65),HX_("master",a2,80,20,bb),
};
static const ::String _hx_array_data_2514e634_46[] = {
	HX_("branch",a2,fe,18,13),
};
HX_LOCAL_STACK_FRAME(_hx_pos_0f0f8a6702f060a3_347_outputHelp,"app.App","outputHelp",0xb1c1e65c,"app.App.outputHelp","app/App.hx",347,0x9296abcb)
namespace app{

void App_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_36_new)
HXLINE(  40)		this->input = ::Sys_obj::_hx_stdin();
HXLINE(  44)		this->currentBranch = this->loadCurrentBranch();
HXLINE(  45)		this->formatter =  ::app::util::Formatter_obj::__alloc( HX_CTX ,null());
HXLINE(  46)		this->dependencyModel =  ::app::model::DependencyModel_obj::__alloc( HX_CTX );
HXLINE(  47)		this->dependencyModel->loadDependencies(this->currentBranch);
            	}

Dynamic App_obj::__CreateEmpty() { return new App_obj; }

void *App_obj::_hx_vtable = 0;

Dynamic App_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< App_obj > _hx_result = new App_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool App_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x313f5580;
}

void App_obj::run(){
            	HX_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_51_run)
HXLINE(  52)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(  54)		{
HXLINE(  54)			int _g = 0;
HXDLIN(  54)			int _g1 = args->length;
HXDLIN(  54)			while((_g < _g1)){
HXLINE(  54)				_g = (_g + 1);
HXDLIN(  54)				int i = (_g - 1);
HXLINE(  55)				::String _hx_switch_0 = args->__get(i);
            				if (  (_hx_switch_0==HX_("-a",94,27,00,00)) ||  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE( 108)					::String dep = args->__get((i + 1));
HXLINE( 109)					this->addDependency(dep);
HXLINE( 107)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-h",9b,27,00,00)) ||  (_hx_switch_0==HX_("help",c1,32,0b,45)) ){
HXLINE( 119)					this->outputHelp();
HXLINE( 120)					goto _hx_goto_1;
HXLINE( 118)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-l",9f,27,00,00)) ||  (_hx_switch_0==HX_("list",5e,1c,b3,47)) ){
HXLINE(  57)					::Sys_obj::println(((HX_("Showing dependencies for [",68,fb,ca,cc) + this->currentBranch) + HX_("]:",3d,51,00,00)));
HXLINE(  58)					{
HXLINE(  58)						int _g2 = 0;
HXDLIN(  58)						::Array< ::String > _g11 = this->dependencyModel->getDependencies();
HXDLIN(  58)						while((_g2 < _g11->length)){
HXLINE(  58)							::String dependency = _g11->__get(_g2);
HXDLIN(  58)							_g2 = (_g2 + 1);
HXLINE(  59)							::Sys_obj::println(dependency);
            						}
            					}
HXLINE(  61)					goto _hx_goto_1;
HXLINE(  56)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-p",a3,27,00,00)) ||  (_hx_switch_0==HX_("prune",2a,73,94,c8)) ){
HXLINE( 114)					this->updateRemotes();
HXLINE( 116)					this->pruneDependencies();
HXLINE( 117)					goto _hx_goto_1;
HXLINE( 113)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-u",a8,27,00,00)) ||  (_hx_switch_0==HX_("update",09,86,05,87)) ){
HXLINE(  69)					::Array< ::String > dependencies = this->dependencyModel->getDependencies();
HXLINE(  70)					::Array< ::String > arg_dependencies = ::Array_obj< ::String >::__new(0);
HXLINE(  71)					int j = (i + 1);
HXLINE(  73)					if (hx::IsNotNull( args->__get(j) )) {
HXLINE(  74)						if ((dependencies->indexOf(args->__get(j),null()) > -1)) {
HXLINE(  77)							arg_dependencies->push(args->__get(j));
HXLINE(  79)							bool dependencyFound = true;
HXLINE(  80)							while(dependencyFound){
HXLINE(  81)								j = (j + 1);
HXLINE(  84)								bool _hx_tmp;
HXDLIN(  84)								if ((dependencies->indexOf(args->__get(j),null()) > -1)) {
HXLINE(  84)									_hx_tmp = (arg_dependencies->indexOf(args->__get(j),null()) < 0);
            								}
            								else {
HXLINE(  84)									_hx_tmp = false;
            								}
HXLINE(  83)								if (_hx_tmp) {
HXLINE(  87)									arg_dependencies->push(args->__get(j));
            								}
            								else {
HXLINE(  89)									dependencyFound = false;
            								}
            							}
            						}
            						else {
HXLINE(  93)							::Sys_obj::println(((HX_("[WARN] Branch: '",3b,f1,e8,f4) + args->__get(j)) + HX_("' not found in dependency list.",b2,19,66,71)));
HXLINE(  94)							goto _hx_goto_1;
            						}
            					}
HXLINE(  98)					if ((arg_dependencies->length > 0)) {
HXLINE(  99)						dependencies = arg_dependencies;
            					}
HXLINE( 102)					::Sys_obj::println(HX_("Updating remotes...",1b,cd,e7,4e));
HXLINE( 103)					this->updateRemotes();
HXLINE( 105)					this->updateDependencyRemotes(dependencies);
HXLINE( 106)					goto _hx_goto_1;
HXLINE(  68)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-d",97,27,00,00)) ||  (_hx_switch_0==HX_("delete",2b,c0,d8,6a)) ){
HXLINE( 111)					::String dep1 = args->__get((i + 1));
HXLINE( 112)					this->removeDependency(dep1);
HXLINE( 110)					goto _hx_goto_2;
            				}
            				if (  (_hx_switch_0==HX_("-s",a6,27,00,00)) ||  (_hx_switch_0==HX_("status",32,e7,fb,05)) ){
HXLINE(  63)					::Sys_obj::println(HX_("Checking for remote updates...",01,45,f1,90));
HXLINE(  64)					this->updateRemotes();
HXLINE(  66)					this->checkDependencyRemoteStatus();
HXLINE(  67)					goto _hx_goto_1;
HXLINE(  62)					goto _hx_goto_2;
            				}
            				_hx_goto_2:;
            			}
            			_hx_goto_1:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,run,(void))

void App_obj::addDependency(::String dependency){
            	HX_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_127_addDependency)
HXDLIN( 127)		bool _hx_tmp;
HXDLIN( 127)		if (hx::IsNotNull( dependency )) {
HXDLIN( 127)			_hx_tmp = (dependency.length != 0);
            		}
            		else {
HXDLIN( 127)			_hx_tmp = false;
            		}
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 128)			this->dependencyModel->addDependency(dependency);
HXLINE( 129)			this->dependencyModel->save();
            		}
            		else {
HXLINE( 131)			::Sys_obj::println(HX_("Dependency cannot be empty.",36,8b,17,0d));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,addDependency,(void))

void App_obj::removeDependency(::String dependency){
            	HX_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_136_removeDependency)
HXLINE( 137)		this->dependencyModel->removeDependency(dependency);
HXLINE( 138)		this->dependencyModel->save();
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,removeDependency,(void))

void App_obj::updateDependencyRemotes(::Array< ::String > dependencies){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_142_updateDependencyRemotes)
HXLINE( 143)		bool updated = false;
HXLINE( 145)		::Array< ::String > preparedBranches = ::Array_obj< ::String >::__new(0);
HXLINE( 147)		{
HXLINE( 147)			int _g = 0;
HXDLIN( 147)			while((_g < dependencies->length)){
HXLINE( 147)				::String dependency = dependencies->__get(_g);
HXDLIN( 147)				_g = (_g + 1);
HXLINE( 148)				 ::Dynamic dependencyStatus = this->getBranchRemoteStatus(dependency);
HXLINE( 150)				if (hx::IsGreater( ::Std_obj::parseInt(( (::String)(dependencyStatus->__Field(HX_("behind",ba,30,80,9b),hx::paccDynamic)) )),0 )) {
HXLINE( 151)					this->updateBranch(dependency);
            				}
HXLINE( 154)				if ((this->getBranchMergeStatus(dependency) == HX_("unmerged",c5,ed,4e,0a))) {
HXLINE( 155)					preparedBranches->push(dependency);
            				}
            			}
            		}
HXLINE( 159)		if ((preparedBranches->length > 0)) {
HXLINE( 160)			::Array< ::String > gitPullArgs = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_11,1)->concat(preparedBranches);
HXLINE( 161)			gitPullArgs->push(HX_("--no-ff",ac,19,ea,ec));
HXLINE( 164)			int exitCode = 0;
HXDLIN( 164)			exitCode = ::Sys_obj::command(HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_12,1)->concat(gitPullArgs));
HXDLIN( 164)			if ((exitCode != 0)) {
HXLINE( 165)				::Sys_obj::println(HX_("Falling back to indiviually merging dependencies.",c5,6a,06,14));
HXLINE( 167)				{
HXLINE( 167)					::Array< ::String > args = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_13,1);
HXDLIN( 167)					 ::sys::io::Process process = null();
HXDLIN( 167)					process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_14,1)->concat(args),null());
HXDLIN( 167)					{
HXLINE( 168)						process->exitCode(null());
HXLINE( 169)						process->close();
            					}
            				}
HXLINE( 172)				{
HXLINE( 172)					int _g1 = 0;
HXDLIN( 172)					while((_g1 < preparedBranches->length)){
HXLINE( 172)						::String branch = preparedBranches->__get(_g1);
HXDLIN( 172)						_g1 = (_g1 + 1);
HXLINE( 173)						if (!(this->updateDependencyBranch(branch))) {
HXLINE( 174)							HX_STACK_DO_THROW(((HX_("There was an error updating: '",63,04,79,33) + branch) + HX_("'",27,00,00,00)));
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 179)			::Sys_obj::println(HX_("Nothing updated.",26,28,b7,61));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,updateDependencyRemotes,(void))

bool App_obj::updateDependencyBranch(::String branch){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_184_updateDependencyBranch)
HXLINE( 185)		::Array< ::String > args = ::Array_obj< ::String >::__new(3)->init(0,HX_("origin",e6,19,01,4b))->init(1,branch)->init(2,HX_("--no-ff",ac,19,ea,ec));
HXDLIN( 185)		int exitCode = 0;
HXDLIN( 185)		exitCode = ::Sys_obj::command(HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_17,1)->concat(args));
HXDLIN( 185)		if ((exitCode != 0)) {
HXLINE( 186)			::String diffFiles = null();
HXLINE( 188)			{
HXLINE( 188)				::Array< ::String > args1 = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_18,2);
HXDLIN( 188)				 ::sys::io::Process process = null();
HXDLIN( 188)				process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_19,1)->concat(args1),null());
HXDLIN( 188)				{
HXLINE( 189)					diffFiles = process->_hx_stdout->readAll(null())->toString();
HXLINE( 190)					process->close();
            				}
            			}
HXLINE( 193)			::Array< ::String > unmergedFiles = ::Array_obj< ::String >::__new(0);
HXLINE( 194)			{
HXLINE( 194)				int _g = 0;
HXDLIN( 194)				::Array< ::String > _g1 = diffFiles.split(HX_("\n",0a,00,00,00));
HXDLIN( 194)				while((_g < _g1->length)){
HXLINE( 194)					::String file = _g1->__get(_g);
HXDLIN( 194)					_g = (_g + 1);
HXLINE( 195)					if ((file.length > 0)) {
HXLINE( 196)						unmergedFiles->push(::StringTools_obj::trim(file));
            					}
            				}
            			}
HXLINE( 201)			::String editor = null();
HXLINE( 203)			{
HXLINE( 203)				::Array< ::String > args2 = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_20,2);
HXDLIN( 203)				 ::sys::io::Process process1 = null();
HXDLIN( 203)				process1 =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_21,1)->concat(args2),null());
HXDLIN( 203)				{
HXLINE( 204)					editor = ::StringTools_obj::trim(process1->_hx_stdout->readAll(null())->toString());
HXLINE( 205)					process1->close();
            				}
            			}
HXLINE( 208)			if ((editor.length > 0)) {
HXLINE( 209)				if ((unmergedFiles->length > 0)) {
HXLINE( 210)					if ((::Sys_obj::command(editor,unmergedFiles) != 0)) {
HXLINE( 211)						::Sys_obj::println(((HX_("An error occurred when opening '",a9,fd,66,4c) + editor) + HX_("'",27,00,00,00)));
HXLINE( 212)						return false;
            					}
HXLINE( 215)					::Sys_obj::println(HX_("Commit these changes? [Y/n]: ",08,3e,64,1d));
HXLINE( 217)					::String userInput = this->input->readLine();
HXLINE( 218)					 ::EReg confReg =  ::EReg_obj::__alloc( HX_CTX ,HX_("[Yy]",e2,5c,6a,3c),HX_("",00,00,00,00));
HXLINE( 220)					if (confReg->match(userInput)) {
HXLINE( 221)						::Array< ::String > args3 = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_22,2);
HXDLIN( 221)						 ::sys::io::Process process2 = null();
HXDLIN( 221)						process2 =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_23,1)->concat(args3),null());
HXDLIN( 221)						{
HXLINE( 222)							process2->exitCode(null());
HXLINE( 223)							process2->close();
            						}
            					}
            				}
            			}
            			else {
HXLINE( 228)				return false;
            			}
            		}
HXLINE( 232)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,updateDependencyBranch,return )

void App_obj::updateBranch(::String branch){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_237_updateBranch)
HXDLIN( 237)		::Array< ::String > args = ::Array_obj< ::String >::__new(2)->init(0,HX_("origin",e6,19,01,4b))->init(1,(((HX_("",00,00,00,00) + branch) + HX_(":",3a,00,00,00)) + branch));
HXDLIN( 237)		 ::sys::io::Process process = null();
HXDLIN( 237)		process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_25,1)->concat(args),null());
HXDLIN( 237)		{
HXLINE( 238)			process->exitCode(null());
HXLINE( 239)			process->close();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,updateBranch,(void))

void App_obj::checkDependencyRemoteStatus(){
            	HX_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_244_checkDependencyRemoteStatus)
HXLINE( 245)		::Array< ::String > deps = this->dependencyModel->getDependencies();
HXLINE( 247)		::Array< ::Dynamic> branchRows = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 248)		{
HXLINE( 248)			int _g = 0;
HXDLIN( 248)			while((_g < deps->length)){
HXLINE( 248)				::String dep = deps->__get(_g);
HXDLIN( 248)				_g = (_g + 1);
HXLINE( 249)				 ::Dynamic status = this->getBranchRemoteStatus(dep);
HXLINE( 251)				::String mergedStatus = this->getBranchMergeStatus(dep);
HXLINE( 253)				branchRows->push(::Array_obj< ::String >::__new(4)->init(0,dep)->init(1, ::Dynamic(status->__Field(HX_("ahead",01,6e,e9,1e),hx::paccDynamic)))->init(2, ::Dynamic(status->__Field(HX_("behind",ba,30,80,9b),hx::paccDynamic)))->init(3,mergedStatus));
            			}
            		}
HXLINE( 256)		this->formatter->printTable(::Array_obj< ::String >::fromData( _hx_array_data_2514e634_28,4),branchRows);
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,checkDependencyRemoteStatus,(void))

 ::Dynamic App_obj::getBranchRemoteStatus(::String branch){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_260_getBranchRemoteStatus)
HXLINE( 261)		::String branchToOrigin = (((HX_("",00,00,00,00) + branch) + HX_("...origin/",5b,79,c8,11)) + branch);
HXLINE( 262)		::String ahead = null();
HXLINE( 263)		::String behind = null();
HXLINE( 265)		{
HXLINE( 265)			::Array< ::String > args = ::Array_obj< ::String >::__new(3)->init(0,HX_("--left-only",52,0b,9d,28))->init(1,HX_("--count",6f,61,b8,97))->init(2,branchToOrigin);
HXDLIN( 265)			 ::sys::io::Process process = null();
HXDLIN( 265)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_30,1)->concat(args),null());
HXDLIN( 265)			{
HXLINE( 266)				ahead = process->_hx_stdout->readAll(null())->toString();
HXLINE( 267)				process->close();
            			}
            		}
HXLINE( 270)		{
HXLINE( 270)			::Array< ::String > args1 = ::Array_obj< ::String >::__new(3)->init(0,HX_("--right-only",1d,36,11,d8))->init(1,HX_("--count",6f,61,b8,97))->init(2,branchToOrigin);
HXDLIN( 270)			 ::sys::io::Process process1 = null();
HXDLIN( 270)			process1 =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_31,1)->concat(args1),null());
HXDLIN( 270)			{
HXLINE( 271)				behind = process1->_hx_stdout->readAll(null())->toString();
HXLINE( 272)				process1->close();
            			}
            		}
HXLINE( 275)		ahead = ::StringTools_obj::trim(ahead);
HXLINE( 276)		behind = ::StringTools_obj::trim(behind);
HXLINE( 278)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("behind",ba,30,80,9b),behind)
            			->setFixed(1,HX_("ahead",01,6e,e9,1e),ahead));
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,getBranchRemoteStatus,return )

::String App_obj::getBranchMergeStatus(::String branch){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_285_getBranchMergeStatus)
HXLINE( 286)		::Array< ::String > dirtyMergedBranches = null();
HXLINE( 288)		{
HXLINE( 288)			::Array< ::String > args = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_34,1);
HXDLIN( 288)			 ::sys::io::Process process = null();
HXDLIN( 288)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_35,1)->concat(args),null());
HXDLIN( 288)			{
HXLINE( 289)				dirtyMergedBranches = process->_hx_stdout->readAll(null())->toString().split(HX_("\n",0a,00,00,00));
HXLINE( 290)				process->close();
            			}
            		}
HXLINE( 293)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 293)		{
HXLINE( 293)			int _g1 = 0;
HXDLIN( 293)			while((_g1 < dirtyMergedBranches->length)){
HXLINE( 293)				::String dB = dirtyMergedBranches->__get(_g1);
HXDLIN( 293)				_g1 = (_g1 + 1);
HXDLIN( 293)				_g->push(::StringTools_obj::trim(dB));
            			}
            		}
HXDLIN( 293)		::Array< ::String > cleanMergedBranches = _g;
HXLINE( 295)		if ((cleanMergedBranches->indexOf(branch,null()) == -1)) {
HXLINE( 296)			return HX_("unmerged",c5,ed,4e,0a);
            		}
HXLINE( 299)		return HX_("merged",ac,be,07,08);
            	}


HX_DEFINE_DYNAMIC_FUNC1(App_obj,getBranchMergeStatus,return )

::String App_obj::loadCurrentBranch(){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_303_loadCurrentBranch)
HXLINE( 304)		::String branch = null();
HXLINE( 305)		{
HXLINE( 305)			::Array< ::String > args = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_37,2);
HXDLIN( 305)			 ::sys::io::Process process = null();
HXDLIN( 305)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_38,1)->concat(args),null());
HXDLIN( 305)			{
HXLINE( 306)				process->exitCode(null());
HXLINE( 308)				branch = process->_hx_stdout->readAll(null())->toString();
HXLINE( 310)				process->close();
            			}
            		}
HXLINE( 313)		branch = ::StringTools_obj::trim(branch);
HXLINE( 315)		return branch;
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,loadCurrentBranch,return )

void App_obj::updateRemotes(){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_321_updateRemotes)
HXDLIN( 321)		::Array< ::String > args = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_40,1);
HXDLIN( 321)		 ::sys::io::Process process = null();
HXDLIN( 321)		process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_41,1)->concat(args),null());
HXDLIN( 321)		{
HXLINE( 322)			process->exitCode(null());
HXLINE( 323)			process->close();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,updateRemotes,(void))

void App_obj::pruneDependencies(){
            	HX_GC_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_328_pruneDependencies)
HXLINE( 329)		::Array< ::String > dependencies = this->dependencyModel->getDependencies();
HXLINE( 330)		::Array< ::String > masterMergedBranches = null();
HXLINE( 332)		{
HXLINE( 332)			::Array< ::String > args = ::Array_obj< ::String >::fromData( _hx_array_data_2514e634_45,2);
HXDLIN( 332)			 ::sys::io::Process process = null();
HXDLIN( 332)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("git",12,84,4e,00),::Array_obj< ::String >::fromData( _hx_array_data_2514e634_46,1)->concat(args),null());
HXDLIN( 332)			{
HXLINE( 333)				masterMergedBranches = process->_hx_stdout->readAll(null())->toString().split(HX_("\n",0a,00,00,00));
HXLINE( 334)				process->close();
            			}
            		}
HXLINE( 337)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 337)		{
HXLINE( 337)			int _g1 = 0;
HXDLIN( 337)			while((_g1 < masterMergedBranches->length)){
HXLINE( 337)				::String branch = masterMergedBranches->__get(_g1);
HXDLIN( 337)				_g1 = (_g1 + 1);
HXDLIN( 337)				_g->push(::StringTools_obj::trim(branch));
            			}
            		}
HXDLIN( 337)		masterMergedBranches = _g;
HXLINE( 339)		{
HXLINE( 339)			int _g2 = 0;
HXDLIN( 339)			while((_g2 < dependencies->length)){
HXLINE( 339)				::String dependency = dependencies->__get(_g2);
HXDLIN( 339)				_g2 = (_g2 + 1);
HXLINE( 340)				bool _hx_tmp;
HXDLIN( 340)				if ((masterMergedBranches->indexOf(dependency,null()) > -1)) {
HXLINE( 340)					_hx_tmp = (dependency != HX_("master",a2,80,20,bb));
            				}
            				else {
HXLINE( 340)					_hx_tmp = false;
            				}
HXDLIN( 340)				if (_hx_tmp) {
HXLINE( 341)					this->removeDependency(dependency);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,pruneDependencies,(void))

void App_obj::outputHelp(){
            	HX_STACKFRAME(&_hx_pos_0f0f8a6702f060a3_347_outputHelp)
HXLINE( 348)		::Sys_obj::println(HX_("GIT-DEPENDENCY",86,46,b1,a4));
HXLINE( 349)		::Sys_obj::println(HX_("",00,00,00,00));
HXLINE( 350)		::Sys_obj::println(HX_("NAME",4b,3a,c0,33));
HXLINE( 351)		::Sys_obj::println(HX_("    git-dependency - Manages branches as dependencies for complex features.",50,04,2d,8e));
HXLINE( 352)		::Sys_obj::println(HX_("",00,00,00,00));
HXLINE( 353)		::Sys_obj::println(HX_("SYNOPSIS",94,8e,ef,e1));
HXLINE( 354)		::Sys_obj::println(HX_("    git dependency [add|-a <branch>] [delete|-d <branch>] [help|-h]",ec,51,cd,b4));
HXLINE( 355)		::Sys_obj::println(HX_("                   [update <branch> |-u <branch>] [status|-s] [list|-s] [prune|-p]",b4,d4,47,71));
HXLINE( 356)		::Sys_obj::println(HX_("",00,00,00,00));
HXLINE( 357)		::Sys_obj::println(HX_("OPTIONS",3e,07,d2,5f));
HXLINE( 358)		::Sys_obj::println(HX_("    add | -a",17,63,48,60));
HXLINE( 359)		::Sys_obj::println(HX_("        add a branch as a dependency.",d6,0e,f6,e9));
HXLINE( 360)		::Sys_obj::println(HX_("    delete | -d",d0,00,c5,a0));
HXLINE( 361)		::Sys_obj::println(HX_("        remove a branch from the dependency list.",fd,85,9b,c4));
HXLINE( 362)		::Sys_obj::println(HX_("    -help | h",12,6c,f0,8e));
HXLINE( 363)		::Sys_obj::println(HX_("        display help.",ef,99,ba,a6));
HXLINE( 364)		::Sys_obj::println(HX_("    update <branch> | -u <branch>",2b,1e,4b,88));
HXLINE( 365)		::Sys_obj::println(HX_("        attempts to update and pull in dependency. If no branch is supplied it will attempt to pull in all dependencies with an octopus merge. If the merge fails it will fallback to individual merge/conflict resolution.",62,c6,57,06));
HXLINE( 366)		::Sys_obj::println(HX_("    status | -s",78,00,54,7e));
HXLINE( 367)		::Sys_obj::println(HX_("        checks to see if there are any changes between the current HEAD and the branches dependencies and outputs a table with those changes.",3e,9b,29,22));
HXLINE( 368)		::Sys_obj::println(HX_("    list | -l",c5,8b,0e,57));
HXLINE( 369)		::Sys_obj::println(HX_("        list dependencies for the current branch.",ea,fd,b2,27));
HXLINE( 370)		::Sys_obj::println(HX_("    prune | -p",7d,81,be,94));
HXLINE( 371)		::Sys_obj::println(HX_("        prune dependencies from the dependency list that are merged with master.",52,5e,37,df));
            	}


HX_DEFINE_DYNAMIC_FUNC0(App_obj,outputHelp,(void))


hx::ObjectPtr< App_obj > App_obj::__new() {
	hx::ObjectPtr< App_obj > __this = new App_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< App_obj > App_obj::__alloc(hx::Ctx *_hx_ctx) {
	App_obj *__this = (App_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(App_obj), true, "app.App"));
	*(void **)__this = App_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

App_obj::App_obj()
{
}

void App_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(App);
	HX_MARK_MEMBER_NAME(dependencyModel,"dependencyModel");
	HX_MARK_MEMBER_NAME(formatter,"formatter");
	HX_MARK_MEMBER_NAME(currentBranch,"currentBranch");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_END_CLASS();
}

void App_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dependencyModel,"dependencyModel");
	HX_VISIT_MEMBER_NAME(formatter,"formatter");
	HX_VISIT_MEMBER_NAME(currentBranch,"currentBranch");
	HX_VISIT_MEMBER_NAME(input,"input");
}

hx::Val App_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"formatter") ) { return hx::Val( formatter ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"outputHelp") ) { return hx::Val( outputHelp_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateBranch") ) { return hx::Val( updateBranch_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentBranch") ) { return hx::Val( currentBranch ); }
		if (HX_FIELD_EQ(inName,"addDependency") ) { return hx::Val( addDependency_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateRemotes") ) { return hx::Val( updateRemotes_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dependencyModel") ) { return hx::Val( dependencyModel ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removeDependency") ) { return hx::Val( removeDependency_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"loadCurrentBranch") ) { return hx::Val( loadCurrentBranch_dyn() ); }
		if (HX_FIELD_EQ(inName,"pruneDependencies") ) { return hx::Val( pruneDependencies_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getBranchMergeStatus") ) { return hx::Val( getBranchMergeStatus_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getBranchRemoteStatus") ) { return hx::Val( getBranchRemoteStatus_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"updateDependencyBranch") ) { return hx::Val( updateDependencyBranch_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"updateDependencyRemotes") ) { return hx::Val( updateDependencyRemotes_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"checkDependencyRemoteStatus") ) { return hx::Val( checkDependencyRemoteStatus_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val App_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"formatter") ) { formatter=inValue.Cast<  ::app::util::Formatter >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentBranch") ) { currentBranch=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dependencyModel") ) { dependencyModel=inValue.Cast<  ::app::model::DependencyModel >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void App_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("dependencyModel",de,fc,7e,d4));
	outFields->push(HX_("formatter",0a,eb,67,19));
	outFields->push(HX_("currentBranch",bb,7f,75,f6));
	outFields->push(HX_("input",0a,c4,1d,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo App_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::app::model::DependencyModel */ ,(int)offsetof(App_obj,dependencyModel),HX_("dependencyModel",de,fc,7e,d4)},
	{hx::fsObject /*  ::app::util::Formatter */ ,(int)offsetof(App_obj,formatter),HX_("formatter",0a,eb,67,19)},
	{hx::fsString,(int)offsetof(App_obj,currentBranch),HX_("currentBranch",bb,7f,75,f6)},
	{hx::fsObject /*  ::haxe::io::Input */ ,(int)offsetof(App_obj,input),HX_("input",0a,c4,1d,be)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *App_obj_sStaticStorageInfo = 0;
#endif

static ::String App_obj_sMemberFields[] = {
	HX_("dependencyModel",de,fc,7e,d4),
	HX_("formatter",0a,eb,67,19),
	HX_("currentBranch",bb,7f,75,f6),
	HX_("input",0a,c4,1d,be),
	HX_("run",4b,e7,56,00),
	HX_("addDependency",4c,60,12,01),
	HX_("removeDependency",2f,34,72,50),
	HX_("updateDependencyRemotes",59,cb,e2,0e),
	HX_("updateDependencyBranch",f6,f7,6e,62),
	HX_("updateBranch",8b,a5,dc,12),
	HX_("checkDependencyRemoteStatus",ab,a8,d8,48),
	HX_("getBranchRemoteStatus",50,d6,5e,a1),
	HX_("getBranchMergeStatus",12,c7,e0,fa),
	HX_("loadCurrentBranch",b5,55,30,5a),
	HX_("updateRemotes",24,00,6d,be),
	HX_("pruneDependencies",33,aa,e4,b4),
	HX_("outputHelp",62,82,ff,a6),
	::String(null()) };

hx::Class App_obj::__mClass;

void App_obj::__register()
{
	App_obj _hx_dummy;
	App_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("app.App",34,e6,14,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(App_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< App_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = App_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = App_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace app
