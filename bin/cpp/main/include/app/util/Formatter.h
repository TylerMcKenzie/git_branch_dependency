// Generated by Haxe 4.0.0+ef18b627e
#ifndef INCLUDED_app_util_Formatter
#define INCLUDED_app_util_Formatter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(app,util,Formatter)

namespace app{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Formatter_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Formatter_obj OBJ_;
		Formatter_obj();

	public:
		enum { _hx_ClassId = 0x656c714b };

		void __construct(hx::Null< bool >  __o_displayColor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="app.util.Formatter")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"app.util.Formatter"); }
		static hx::ObjectPtr< Formatter_obj > __new(hx::Null< bool >  __o_displayColor);
		static hx::ObjectPtr< Formatter_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< bool >  __o_displayColor);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Formatter_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Formatter",ea,ca,3a,bb); }

		static void __boot();
		static int CELL_PAD;
		bool _displayColor;
		::Array< int > _columnData;
		void printTable(::Array< ::String > headers,::Array< ::Dynamic> rows);
		::Dynamic printTable_dyn();

		::String getFormattedRowOutput(::Array< ::String > row);
		::Dynamic getFormattedRowOutput_dyn();

		::String getPadding( ::Dynamic length);
		::Dynamic getPadding_dyn();

		::Array< ::String > getRowColumnByIndex(int index,::Array< ::Dynamic> rows);
		::Dynamic getRowColumnByIndex_dyn();

		int getLongestStringLength(::Array< ::String > array);
		::Dynamic getLongestStringLength_dyn();

		void setColumnWidths(::Array< ::String > headers,::Array< ::Dynamic> rows);
		::Dynamic setColumnWidths_dyn();

		bool validateColumnCount(::cpp::VirtualArray headers,::Array< ::Dynamic> rows);
		::Dynamic validateColumnCount_dyn();

};

} // end namespace app
} // end namespace util

#endif /* INCLUDED_app_util_Formatter */ 
